/*
    Copyright 2013 by Mathias Mamsch
    This file is part of the Parallels Library 

    The Parallels Library  is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The Parallels Library  is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Parallels Library.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <lib/Parallels/Worker.inc>
#include <lib/Parallels/Pool.inc>

#include <lib/core/Strings.inc>

#include <lib/core/Shell.inc>
#include <lib/core/System.inc>
#include <lib/Parallels/CommandWorker.inc>
#include <lib/Parallels/DoorsBatchWorker.inc>

#include <lib/core/StreamEx.inc>
#include <lib/core/SQLite.inc>

#include <lib/core/binary.inc>
#include <lib/extended/SqliteExport.inc>

string sUser     = "Administrator"
string sPassword = "";
string sDatabaseFile = "C:\\temp\\mydb.sql"; 

SQLite dbData = null;
bool bRun = false;
Date startTime = null, endTime = null; 

Buffer bufLog = create(); 

DBE sbStatus = null; 
DBE btRun = null, btClose = null;
DBE fldExportJobs = null, fldFinishedExportJobs = null, fldLog = null;
DBE fldImportJobs = null, fldFinishedImportJobs = null;

Pool poolExport = null, poolImport = null;

Folder fStart = folder "/"; 
Skip skItemsToBeProcessed = create(); 
int currentItem = 0;

void pushItem (Item I) {
    // print "Pushing item " (rootName_ I) "\n"
    put(skItemsToBeProcessed, currentItem++, I, true); 
}

Item popItem () {
    Item I = null Item; 
    if (currentItem > 0) find(skItemsToBeProcessed, --currentItem, I);
    // if (!null I) print "Popping item " (rootName_ I) "\n" 
    return I;
}

void readDatabase () {
    dbData = createSQLite(sDatabaseFile, false);
}

void initializeDatabase() {
    dbData = createSQLite(sDatabaseFile, true);
    setupDoorsDatabase (dbData, true); 
    Worker wrkInit = createCommandWorker (getCommandForExecution_(dbData));
    enqueue(poolImport, wrkInit);
}

int lastRunTime = -1;

void runExportTimerCallback(DBE x) {
    if (!bRun) return; 
    int runTime =  (intOf today())- (intOf startTime);
    
    // Update the time 
    if (lastRunTime != runTime) {
        set(sbStatus, 0,  "Elapsed: " runTime " s");
        lastRunTime = runTime;
    }
    
    Item it = popItem();
    if (!null it) {
        // if its a formal module, enqueue the export
        if (type it == "Formal" && !isDeleted it) {
            Worker w = createDoorsBatchWorker (getCurrentFile(), sUser, sPassword);
            string sExportFilename = tempFileName() ".sql";
            // print "Enqueuing export to file " sExportFilename "\n";
            setParallelsParameter(w, "itemfullname", fullName it);
            setParallelsParameter(w, "exportfile", sExportFilename);
            setWorkerProperty(w, "item", fullName it);
            enqueue(poolExport, w );
        }
        
        if (type it == "Folder" || type it == "Project") {
            Item itChild; 
            for itChild in folder fullName it do {
                pushItem (itChild); 
            }
        }
    } else {
        if (isFinished poolExport && isFinished poolImport) {
            bRun = false; 
            set(sbStatus, 0, "Finished: " runTime " s");
            string sReturn; 
            Worker w; for w in getResults(poolExport) do print (getWorkerResult w) "\n";
        } 
    }
    
    processQueue poolExport
    processQueue poolImport
    
    set(fldExportJobs, (getQueueLength poolExport) "");
    set(fldFinishedExportJobs, (getFinishedJobs poolExport) "");
    set(fldImportJobs, (getQueueLength poolImport) "");
    set(fldFinishedImportJobs, (getFinishedJobs poolImport) "");
    set(fldLog, bufLog);
    
    // From the finished export jobs make import jobs
    Worker w; for w in getResults(poolExport) do {
        string sFilename = getWorkerResult(w);
        if (sFilename[0:1] == "0\n") {
            string sSQLFile = sFilename[2:];
            if (fileExists_ sSQLFile) { 
                print "Starting import job for " sSQLFile "\n";
                print "Item: " (getWorkerStringProperty(w, "item")) " TempDir: " (getWorkerStringProperty(w, "tempdir")) "\n"
                print "\n\n"
                createNewSQLCommandsFile dbData += ".read " replaceSlashes(sSQLFile, "\\\\");
                
                Worker wrkImport = createCommandWorker (getCommandForExecution_(dbData));
                enqueue(poolImport, wrkImport)
            } else {
                print "File not found: " sSQLFile "\n"
                print "Item: " (getWorkerStringProperty(w, "item")) " TempDir: " (getWorkerStringProperty(w, "tempdir")) "\n"
                print "\n\n"
            }
        } else {
            print "Unexpected Export Result: " sFilename "\n";
            print "Item: " (getWorkerStringProperty(w, "item")) " TempDir: " (getWorkerStringProperty(w, "tempdir")) "\n"
            print "\n\n"
        }
    }
    
    clearAllResults(poolExport);
    
    for w in getResults(poolImport) do {
        string sCommand = null; 
        getWorkerArgument(w, "command", sCommand)
        print "Import Worker Command: " sCommand "\n";
        print "Import done: " getWorkerResult(w) "\n";
    };
    
    clearAllResults(poolImport);
}

void runExportCallback(DBE ) {
    if (null dbData) {
        startTime = today();
        
        poolExport = createPool 12;
        poolImport = createPool 1;
        
        initializeDatabase();
        pushItem (item fullName fStart); 
    }
     
    bRun = !bRun; 
}

void closeFunc(DB x) { release x; hide x }
void closeFuncDBE(DBE x) { closeFunc getParent x }

void showDialog () {
    DB diag = topMost "SQLite Exporter"; 
    int sizes[] = {300} 
    
    timer(diag, 0.1, runExportTimerCallback, "ExportTimer");
    sbStatus = statusBar(diag, "", sizes);
    close (diag, false, closeFunc);
    
    fldExportJobs = field(diag, "Export Jobs", "", 7, true);
    fldExportJobs->"top"->"form";
    fldExportJobs -> "left" -> "form"
    
    fldFinishedExportJobs   = field(diag, "   Finished: ", "", 7, true);
    fldFinishedExportJobs -> "top" -> "spaced" -> fldExportJobs;
    fldFinishedExportJobs -> "left" -> "form"
    
    fldImportJobs = field(diag, "Import Jobs", "", 7, true);
    fldImportJobs->"top"->"form";
    fldImportJobs -> "left" -> "spaced" -> fldExportJobs
    
    fldFinishedImportJobs   = field(diag, "   Finished: ", "", 7, true);
    fldFinishedImportJobs -> "top" -> "spaced" -> fldImportJobs;
    fldFinishedImportJobs -> "left" -> "spaced" -> fldExportJobs

    fldLog   = text(diag, "Log: ", "", 80, 80, true);
    fldLog -> "top" -> "spaced" -> fldFinishedExportJobs;
    fldLog -> "left" -> "form"
    
    btRun = button (diag, "Run Export", runExportCallback);
    btRun -> "left" -> "form"
    btRun -> "top" -> "spaced"->fldLog;
    
    btClose = button (diag, "Close", closeFuncDBE);
    btClose -> "left" -> "spaced"->btRun
    btClose -> "top" -> "spaced"->fldLog;
    
    realize diag
    setSize(diag, 300, 400);  
    block diag;
    destroy diag;
    halt;
}

// #include <D:/mma/Projekte/DXLParallels/examples/SqlExport/SqlLiteExport.dxl>

if (isBatch()) {
    string sItemName = getParallelsParameter "itemfullname";
    Item it = item sItemName;  

    if (!null it && !isDeleted it) {
        string sExportFilename = getParallelsParameter "exportfile";
        Stream strmExport = write (sExportFilename, CP_UTF8);
        StreamEx expFile = createStreamEx(strmExport)
        exportModule(expFile, it);
        closeStreamEx(expFile);
        cout << sExportFilename;
    } else {
        cout << "No such item: " sItemName "\n"
    }
} else {
    if (true) {
        showDialog ();
    } else {
        int i; for (i = 0; i < 10; i++) {
            Item I = item "/BMW ReqIF Import/SPECIFICATION";
            string s = "C:\\temp\\test.sql";
            Worker w = createDoorsBatchWorker (getCurrentFile(), sUser, sPassword);
            setParallelsParameter(w, "itemfullname", fullName I);
            setParallelsParameter(w, "exportfile", s);
            doWork w;
            waitFor(w);
            print "RESULT:" (getWorkerResult w) "\n";
        }
    }
}
